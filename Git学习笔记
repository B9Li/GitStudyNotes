Git是什么:
Git是分布式版本管理系统
不正确的说分布式就是每个人的东西都存储在自己本地，
集中式就是每个人的东西集中储存在一个中央服务器

版本的意思就是写了好多情书，第一次写下来的就是第一个版本 然后觉得不合适 修修改改，第二个版本出炉，再修修改改第三..... 
管理这么多写过的版本，就是版本管理

系统就是指某个东西

那么分布式 版本管理/控制 系统，的意思就是把自己写过的那么多情书储存在自己本地进行管理的一个东西
-----------------------------------------------------------------------------------------------------------------
如何安装Git:
操作系统不同，安装方式不同，
下述两种操作系统安装方式

Linux
源码安装
1.找到官网，
2.解压文件包
3.   ./configure --prefix=/<目录名>/ <目录名>/...   （配置安装目录）   
      make && make install（编译+安装）
      vi ~/.bashrc (添加到系统变量） 文件末尾添加export PATH="<路径-bin>:$PATH"
      source ~/.bashrc  (生效）
      git version (查看是否安装完成)

Windows
1.找到官网，
2.下载安装程序
-----------------------------------------------------------------------------------------------------------------
如何使用Git:
Git的功能是对文件进行管理，对文件进行管理需要一个地方，那么就要在系统中创建这个地方，这个地方=仓库
(如果是从远程库克隆过来则无需进行此操作)
创建仓库
mkdir <库名字>
git init
写一些情书
git add <一些情书>
git commit -m "输入一些记号用于自己回忆”
仓库里面有分三个区域，
一个区域用于写情书(工作区），第二个用于将写好的情书备份存放（暂存区git add)，第三个用于将暂存区的东西提交，敲定版本(提交到分支 git commit -m " ")
-----------------------------------------------------------------------------------------------------------------
更多操作：

写完一封情书后，过一段时间再看就会发现可以写得更好，这时就会进行修改，
既然修改了就会想要对比改前改后的区别，那么咒语git status可以查看仓库当前的状态，git diff <文件名> 就可以帮助对比
问机器“我修改过哪些文件呀？” "修改后有备份存放吗？"
比如当工作区的文件修改后，就和分支文件不一致，git status会显示提醒
git diff <文件名>/git diff HEAD -- <文件名>  可以比较工作区和分支的同一文件的变动信息
当工作区的文件提交到暂存区后，git status可以显示暂存区内的东西

随着不断更新版本，提交到分支，就会产生很多commit
每一次commit都会产生一个id编号
git log/git log --pretty=oneline/git reflog 可以找到所有的id记录，
如果觉得最新的版本不好，就可以git reset --hard <commit id 编号> ，跳回到你觉得好的那一个版本

当你改来改去，发现原来的就不错，还不如不改呢，
那么就可以git checkout -- <文件名> 来恢复初始工作区的这个文件，暂存区有，就初始成暂存区，暂存区没有，就初始成分支
如果修改了，提交到暂存区了，又后悔了，就可以用git reset HEAD <file>把暂存区的修改撤销，重新放回工作区，

工作区和分支正常来说保持一致，
如果在工作区内删除一个文件，
那么分支也要进行删除这个文件git rm <文件名>
如果工作区删错了，但是分支还有这个文件，那么git checkout -- <文件名>可以把工作区的文件恢复

以上就是Git本地的一些操作，以下是Git的远程仓库操作
-----------------------------------------------------------------------------------------------------------------
远程仓库:
如果是团队协作，那么就要一台机子当作枢纽（事物相互联系的中心环节），来让团队相互沟通联系。
可以在网上白嫖一台服务器，让这台远程仓库/服务器当枢纽，大家都往这个仓库汇总。

白嫖远程仓库：
1.GitHub注册账号
2.ssh-keygen -t rsa -C "youremail@example.com"
(https://zhuanlan.zhihu.com/p/21999778  SSH的文章)
3.找到id_rsa.pub  (id_rsa是私钥，不可泄露)  公钥私钥=秘钥对
4.GitHub-SSH Keys-Add SSH Key    粘贴进id_rsa.pub 
5.GitHub新建一个仓库
6.将本地仓库与远程仓库进行关联$ git remote add origin git@github.com:michaelliao/learngit.git
7.git push -u origin master/git push origin master将本地内容推送至远程仓库
8.git remote -v/git remote rm origin删除关联
反向操作
1.GitHub新建一个远程仓库
2.$ git clone git@github.com:michaelliao/gitskills.git 把远程仓库的东西克隆到本地
(无需关联，配置SSH KEY就可以)
如果是clone https会失败，多试几次。
git remote -v 查看远程库信息
git checkout -b dev origin/dev 创建远程库副分支到本地
-----------------------------------------------------------------------------------------------------------------
分支管理
分支就是一条线，项目进展情况的一条线
项目都有一个主要的分支，主分支master/main
那么复制一份这个主分支，就得到了一份副分支，两者一模一样
复制后，在副分支上修改 不会影响主分支的内容，
这样做的好处是主分支可以继续稳定的展示、副分支修改后内容不一定成熟，可以先不展示，继续发展。
git branch 先确认自己在哪条分支上
git branch <副分支名>    确认后复制这条分支
git checkout <副分支名>   切换到这条分支上

在工作区上修改文件，修改完成后可以自主决定将文件提交到哪条分支上，多个副分支之间其实并无什么关联，

当副分支写成熟后，想覆盖到主分支，让主分支也更新
就可以git merge dev 将两个合并，当不需要副分支时就可以将其删除git branch -d <副分支名>

冲突：如果主分支改动了文件并commit,副分支也改动并commit 
当两者合并时就会发生冲突
这时需要进入主分支，手动确认修改内容再commit解决冲突
git上很多事情以再次commit的方法来敲定版本

禁用Fast forward模式可以保留分支信息，$ git merge --no-ff -m "merge with no-ff" <副分支名>
查看分支合并图git log --graph --pretty=oneline --abbrev-commit
强行删除未被合并的分支git branch -D <分支名>
-----------------------------------------------------------------------------------------------------------------
多人合作
如果多人合作时发生冲突，就需要git pull 把远程最新提交抓下来并替换本地，在本地解决冲突，再次上传。
-----------------------------------------------------------------------------------------------------------------
                                                                                20230417:在此感谢廖雪峰老师的教程
